#include <iostream>
#include <windows.h>
#include <fstream>

#define White SetConsoleTextAttribute(error, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN);
#define Red SetConsoleTextAttribute(error, FOREGROUND_RED);

using namespace std;
int n = 15;

struct datetime
{
	int number;
	int day;
	int month;
	int year;

	void OutputDate() // МЕТОД Вывод текущей даты
	{
		cout << "Полученная дата " << number << ":\t\t " << day << "." << month << "." << year;
	}
	void OutputDate1() // МЕТОД Вывод текущей даты
	{
		cout << "Полученная дата " << number << ":\t\t " << day << "." << month << "." << year << endl;
	}
	void Output_NextDate() // МЕТОД Вывод следующей даты
	{
		cout << "\tСледующая дата:\t " << day << "." << month << "." << year << endl;
	}

	void NextDate()		// МЕТОД Получить следуюущую дату
	{
		int arra[12] = { 31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

		for (int i = 0; i < 12; i++)
		{
			if (month != 2 && month == i + 1 && day == arra[i])	// Если день последний в месяце
			{
				day = 1;
				month = month + 1;
				break;
			}
			else if (month != 2 && month == 12 && day == arra[i])	// Если день последний в 12 месяце
			{
				day = 1;
				month = 1;
				++year;
				break;
			}
			else if (month != 2 && month == i + 1 && day != arra[i])	// Если день не последний
			{
				++day;
				break;
			}

			if (month == 2 && day == 29 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0))	// Если год високосный и день последний в месяце
			{
				day = 1;
				month = month + 1;
				break;
			}
			else if (month == 2 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0))	// Если год високосный и день не последний в месяце
			{
				++day;
				break;
			}

			if (month == 2 && day == 28 && year % 4 != 0)	// Если год не високосный и день последний в месяце
			{
				day = 1;
				month = month + 1;
				break;
			}
			else if (month == 2 && year % 4 != 0)	// Если год не високосный и день не последний в месяце
			{
				++day;
				break;
			}

		}

	}
};

int nmbr_of_smbls()	//	Функция подсчёта символов в файле
{
	ifstream info("C:\\Users\\ahgin\\Desktop\\Lab1\\file.txt");
	if (!info)
	{
		cout << "Ошибка открытия файла" << endl;
	}

	char symbol; int count = 0;
	while (info.get(symbol))
	{
		count++;
	}

	return count;
}

int nmbr_of_date()	// Функция подсчёта дат в файле
{
	ifstream info;
	if (!info)
	{
		cout << "Ошибка открытия файла" << endl;
	}

	int sz = nmbr_of_smbls(); int i = 0; int count = 0;
	char* str = new char[sz];

	info.open("C:\\Users\\ahgin\\Desktop\\Lab1\\file.txt");
	while (info.get(str[i]))	// Посимвольное считывание
	{
		if (str[i] == '\n') ++count;	// Количество дат
		i++;
	}
	info.close();

	delete[] str;
	return count;
}

int check()	// Проверка на количество дат
{
	HANDLE error = GetStdHandle(STD_OUTPUT_HANDLE);

	int count = nmbr_of_date();

	Red
	if (count < n)
	{
		cout << "Ошибка! Количество дат в файле меньше заданного количества объектов." << endl;
		cout << "Идёт замена заданного количества объектов на максимальное количество дат в файле.." << endl << endl;
		n = count;
	}
	White

	return n;
}

void funk(datetime* arr)	// Запись из файла в объекты
{
	ifstream info;
	if (!info)
	{
		cout << "Ошибка открытия файла" << endl;
	}

	int sz = check();
	info.open("c:\\users\\ahgin\\desktop\\lab1\\file.txt");
	for (int i = 0; i < sz; i++)	// считываем номера
	{
		info >> arr[i].number; info >> arr[i].day; info >> arr[i].month; info >> arr[i].year;
	}
	info.close();
}

void prnt(datetime *arr) // Вывод всех дат, не равных 31.12.ГГГГ
{
	int sz = check();

	for (int i = 0; i < sz; i++)
	{
		if (arr[i].month == 12 && arr[i].day == 31) continue;
		else arr[i].OutputDate1();
	}
}




int main()
{

	setlocale(LC_ALL, "ru");

	ifstream info("C:\\Users\\ahgin\\Desktop\\Lab1\\file.txt");
	if (!info)
	{
		cout << "Ошибка открытия файла" << endl;
	}

	datetime* arr = new datetime[n];

	funk(arr);
	prnt(arr);

	cout << endl << "$" << endl << endl;

	int sz = check();
	for (int i = 0; i < sz; i++)
	{
		arr[i].OutputDate();
		arr[i].NextDate();
		arr[i].Output_NextDate();
	}

	delete[] arr;
	return 0;
}